--TRIGGER PARA ACTUALIZAR TOTAL REPORTES EN USUARIOS
-- Funci√≥n que actualiza el contador
CREATE OR REPLACE FUNCTION upsert_veces_reportado()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO reportados (idNumero, vecesReportado)
  VALUES (NEW.idNumero, 1)
  ON CONFLICT (idNumero)
  DO UPDATE SET vecesReportado = reportados.vecesReportado + 1;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_upsert_veces_reportado
AFTER INSERT ON reportes
FOR EACH ROW
EXECUTE FUNCTION upsert_veces_reportado();



CREATE OR REPLACE FUNCTION mantener_mv_busqueda_reportes()
RETURNS trigger AS $$
BEGIN
  -- üü¢ Si se inserta o actualiza un reporte
  IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
    INSERT INTO mv_busqueda_reportes (
        idReporte,
        nombre_usuario,
        numeroReportado,
        categoriaReporte,
        fechaReporte,
        estatus
    )
    SELECT 
        NEW.idReporte,
        u.nombre AS nombre_usuario,
        rep.numeroReportado,
        NEW.categoriaReporte,
        NEW.fechaReporte,
        NEW.estatus
    FROM usuarios u
    LEFT JOIN reportados rep ON NEW.idNumero = rep.idNumero
    WHERE u.idUsuario = NEW.idUsuario
    ON CONFLICT (idReporte) DO UPDATE
    SET 
        nombre_usuario = EXCLUDED.nombre_usuario,
        numeroReportado = EXCLUDED.numeroReportado,
        categoriaReporte = EXCLUDED.categoriaReporte,
        fechaReporte = EXCLUDED.fechaReporte,
        estatus = EXCLUDED.estatus;
  
  -- üî¥ Si se elimina un reporte
  ELSIF (TG_OP = 'DELETE') THEN
    DELETE FROM mv_busqueda_reportes WHERE idReporte = OLD.idReporte;
  END IF;

  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_mantener_mv_busqueda_reportes
AFTER INSERT OR UPDATE OR DELETE
ON reportes
FOR EACH ROW
EXECUTE FUNCTION mantener_mv_busqueda_reportes();

-- =====================================
-- Trigger para incrementar totalReportes
-- =====================================

-- 1Ô∏è‚É£ Crear la funci√≥n del trigger
CREATE OR REPLACE FUNCTION incrementar_total_reportes()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE usuarios
    SET totalReportes = totalReportes + 1
    WHERE idUsuario = NEW.idUsuario;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 2Ô∏è‚É£ Crear el trigger que se dispara al insertar un reporte
CREATE TRIGGER trigger_incrementar_total_reportes
AFTER INSERT ON reportes
FOR EACH ROW
EXECUTE FUNCTION incrementar_total_reportes();
